# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class FileVariableDetails(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, data: List[float]=None, dimensions: List[int]=None, latitude: int=None, longitude: int=None, time: int=None, level: int=None):  # noqa: E501
        """FileVariableDetails - a model defined in Swagger

        :param data: The data of this FileVariableDetails.  # noqa: E501
        :type data: List[float]
        :param dimensions: The dimensions of this FileVariableDetails.  # noqa: E501
        :type dimensions: List[int]
        :param latitude: The latitude of this FileVariableDetails.  # noqa: E501
        :type latitude: int
        :param longitude: The longitude of this FileVariableDetails.  # noqa: E501
        :type longitude: int
        :param time: The time of this FileVariableDetails.  # noqa: E501
        :type time: int
        :param level: The level of this FileVariableDetails.  # noqa: E501
        :type level: int
        """
        self.swagger_types = {
            'data': List[float],
            'dimensions': List[int],
            'latitude': int,
            'longitude': int,
            'time': int,
            'level': int
        }

        self.attribute_map = {
            'data': 'data',
            'dimensions': 'dimensions',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'time': 'time',
            'level': 'level'
        }
        self._data = data
        self._dimensions = dimensions
        self._latitude = latitude
        self._longitude = longitude
        self._time = time
        self._level = level

    @classmethod
    def from_dict(cls, dikt) -> 'FileVariableDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FileVariableDetails of this FileVariableDetails.  # noqa: E501
        :rtype: FileVariableDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self) -> List[float]:
        """Gets the data of this FileVariableDetails.


        :return: The data of this FileVariableDetails.
        :rtype: List[float]
        """
        return self._data

    @data.setter
    def data(self, data: List[float]):
        """Sets the data of this FileVariableDetails.


        :param data: The data of this FileVariableDetails.
        :type data: List[float]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def dimensions(self) -> List[int]:
        """Gets the dimensions of this FileVariableDetails.


        :return: The dimensions of this FileVariableDetails.
        :rtype: List[int]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions: List[int]):
        """Sets the dimensions of this FileVariableDetails.


        :param dimensions: The dimensions of this FileVariableDetails.
        :type dimensions: List[int]
        """
        if dimensions is None:
            raise ValueError("Invalid value for `dimensions`, must not be `None`")  # noqa: E501

        self._dimensions = dimensions

    @property
    def latitude(self) -> int:
        """Gets the latitude of this FileVariableDetails.


        :return: The latitude of this FileVariableDetails.
        :rtype: int
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude: int):
        """Sets the latitude of this FileVariableDetails.


        :param latitude: The latitude of this FileVariableDetails.
        :type latitude: int
        """

        self._latitude = latitude

    @property
    def longitude(self) -> int:
        """Gets the longitude of this FileVariableDetails.


        :return: The longitude of this FileVariableDetails.
        :rtype: int
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude: int):
        """Sets the longitude of this FileVariableDetails.


        :param longitude: The longitude of this FileVariableDetails.
        :type longitude: int
        """

        self._longitude = longitude

    @property
    def time(self) -> int:
        """Gets the time of this FileVariableDetails.


        :return: The time of this FileVariableDetails.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time: int):
        """Sets the time of this FileVariableDetails.


        :param time: The time of this FileVariableDetails.
        :type time: int
        """

        self._time = time

    @property
    def level(self) -> int:
        """Gets the level of this FileVariableDetails.


        :return: The level of this FileVariableDetails.
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level: int):
        """Sets the level of this FileVariableDetails.


        :param level: The level of this FileVariableDetails.
        :type level: int
        """

        self._level = level
